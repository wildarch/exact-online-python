# coding: utf-8

"""
    Exact Online Rest API

    Interact with Exact Online database

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def division_documents_document_attachments_get(self, division, access_token, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_documents_document_attachments_get(division, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param str filter: Filter options for the returned results
        :param str select: Restrict the returned properties to the given set (\"prop1,prop2,...\")
        :param str expand: Expand a given property from an ID to the actual endpoint data
        :param str skiptoken: Skiptoken GUID
        :param str orderby: Order the returned items by the given property
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.division_documents_document_attachments_get_with_http_info(division, access_token, **kwargs)
        else:
            (data) = self.division_documents_document_attachments_get_with_http_info(division, access_token, **kwargs)
            return data

    def division_documents_document_attachments_get_with_http_info(self, division, access_token, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_documents_document_attachments_get_with_http_info(division, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param str filter: Filter options for the returned results
        :param str select: Restrict the returned properties to the given set (\"prop1,prop2,...\")
        :param str expand: Expand a given property from an ID to the actual endpoint data
        :param str skiptoken: Skiptoken GUID
        :param str orderby: Order the returned items by the given property
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['division', 'access_token', 'filter', 'select', 'expand', 'skiptoken', 'orderby']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method division_documents_document_attachments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'division' is set
        if ('division' not in params) or (params['division'] is None):
            raise ValueError("Missing the required parameter `division` when calling `division_documents_document_attachments_get`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `division_documents_document_attachments_get`")

        resource_path = '/{division}/documents/DocumentAttachments'.replace('{format}', 'json')
        path_params = {}
        if 'division' in params:
            path_params['division'] = params['division']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']
        if 'filter' in params:
            query_params['$filter'] = params['filter']
        if 'select' in params:
            query_params['$select'] = params['select']
        if 'expand' in params:
            query_params['$expand'] = params['expand']
        if 'skiptoken' in params:
            query_params['$skiptoken'] = params['skiptoken']
        if 'orderby' in params:
            query_params['$orderby'] = params['orderby']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2001',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def division_documents_documents_get(self, division, access_token, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_documents_documents_get(division, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param str filter: Filter options for the returned results
        :param str select: Restrict the returned properties to the given set (\"prop1,prop2,...\")
        :param str expand: Expand a given property from an ID to the actual endpoint data
        :param str skiptoken: Skiptoken GUID
        :param str orderby: Order the returned items by the given property
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.division_documents_documents_get_with_http_info(division, access_token, **kwargs)
        else:
            (data) = self.division_documents_documents_get_with_http_info(division, access_token, **kwargs)
            return data

    def division_documents_documents_get_with_http_info(self, division, access_token, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_documents_documents_get_with_http_info(division, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param str filter: Filter options for the returned results
        :param str select: Restrict the returned properties to the given set (\"prop1,prop2,...\")
        :param str expand: Expand a given property from an ID to the actual endpoint data
        :param str skiptoken: Skiptoken GUID
        :param str orderby: Order the returned items by the given property
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['division', 'access_token', 'filter', 'select', 'expand', 'skiptoken', 'orderby']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method division_documents_documents_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'division' is set
        if ('division' not in params) or (params['division'] is None):
            raise ValueError("Missing the required parameter `division` when calling `division_documents_documents_get`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `division_documents_documents_get`")

        resource_path = '/{division}/documents/Documents'.replace('{format}', 'json')
        path_params = {}
        if 'division' in params:
            path_params['division'] = params['division']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']
        if 'filter' in params:
            query_params['$filter'] = params['filter']
        if 'select' in params:
            query_params['$select'] = params['select']
        if 'expand' in params:
            query_params['$expand'] = params['expand']
        if 'skiptoken' in params:
            query_params['$skiptoken'] = params['skiptoken']
        if 'orderby' in params:
            query_params['$orderby'] = params['orderby']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2002',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def division_logistics_item_groups_get(self, division, access_token, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_logistics_item_groups_get(division, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param str filter: Filter options for the returned results
        :param str select: Restrict the returned properties to the given set (\"prop1,prop2,...\")
        :param str expand: Expand a given property from an ID to the actual endpoint data
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.division_logistics_item_groups_get_with_http_info(division, access_token, **kwargs)
        else:
            (data) = self.division_logistics_item_groups_get_with_http_info(division, access_token, **kwargs)
            return data

    def division_logistics_item_groups_get_with_http_info(self, division, access_token, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_logistics_item_groups_get_with_http_info(division, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param str filter: Filter options for the returned results
        :param str select: Restrict the returned properties to the given set (\"prop1,prop2,...\")
        :param str expand: Expand a given property from an ID to the actual endpoint data
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['division', 'access_token', 'filter', 'select', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method division_logistics_item_groups_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'division' is set
        if ('division' not in params) or (params['division'] is None):
            raise ValueError("Missing the required parameter `division` when calling `division_logistics_item_groups_get`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `division_logistics_item_groups_get`")

        resource_path = '/{division}/logistics/ItemGroups'.replace('{format}', 'json')
        path_params = {}
        if 'division' in params:
            path_params['division'] = params['division']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']
        if 'filter' in params:
            query_params['$filter'] = params['filter']
        if 'select' in params:
            query_params['$select'] = params['select']
        if 'expand' in params:
            query_params['$expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2003',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def division_logistics_items_get(self, division, access_token, **kwargs):
        """
        Gets a list of items
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_logistics_items_get(division, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param str filter: Filter options for the returned results
        :param str select: Restrict the returned properties to the given set (\"prop1,prop2,...\")
        :param str expand: Expand a given property from an ID to the actual endpoint data
        :param str skiptoken: Skiptoken GUID
        :param str orderby: Order the returned items by the given property
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.division_logistics_items_get_with_http_info(division, access_token, **kwargs)
        else:
            (data) = self.division_logistics_items_get_with_http_info(division, access_token, **kwargs)
            return data

    def division_logistics_items_get_with_http_info(self, division, access_token, **kwargs):
        """
        Gets a list of items
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_logistics_items_get_with_http_info(division, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param str filter: Filter options for the returned results
        :param str select: Restrict the returned properties to the given set (\"prop1,prop2,...\")
        :param str expand: Expand a given property from an ID to the actual endpoint data
        :param str skiptoken: Skiptoken GUID
        :param str orderby: Order the returned items by the given property
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['division', 'access_token', 'filter', 'select', 'expand', 'skiptoken', 'orderby']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method division_logistics_items_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'division' is set
        if ('division' not in params) or (params['division'] is None):
            raise ValueError("Missing the required parameter `division` when calling `division_logistics_items_get`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `division_logistics_items_get`")

        resource_path = '/{division}/logistics/Items'.replace('{format}', 'json')
        path_params = {}
        if 'division' in params:
            path_params['division'] = params['division']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']
        if 'filter' in params:
            query_params['$filter'] = params['filter']
        if 'select' in params:
            query_params['$select'] = params['select']
        if 'expand' in params:
            query_params['$expand'] = params['expand']
        if 'skiptoken' in params:
            query_params['$skiptoken'] = params['skiptoken']
        if 'orderby' in params:
            query_params['$orderby'] = params['orderby']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2004',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def division_logistics_items_guiditem_id_delete(self, division, item_id, access_token, **kwargs):
        """
        Delete an item from the database
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_logistics_items_guiditem_id_delete(division, item_id, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str item_id: ID of Item to delete (required)
        :param str access_token: Access token to the authenticate the request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.division_logistics_items_guiditem_id_delete_with_http_info(division, item_id, access_token, **kwargs)
        else:
            (data) = self.division_logistics_items_guiditem_id_delete_with_http_info(division, item_id, access_token, **kwargs)
            return data

    def division_logistics_items_guiditem_id_delete_with_http_info(self, division, item_id, access_token, **kwargs):
        """
        Delete an item from the database
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_logistics_items_guiditem_id_delete_with_http_info(division, item_id, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str item_id: ID of Item to delete (required)
        :param str access_token: Access token to the authenticate the request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['division', 'item_id', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method division_logistics_items_guiditem_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'division' is set
        if ('division' not in params) or (params['division'] is None):
            raise ValueError("Missing the required parameter `division` when calling `division_logistics_items_guiditem_id_delete`")
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params) or (params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `division_logistics_items_guiditem_id_delete`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `division_logistics_items_guiditem_id_delete`")

        resource_path = '/{division}/logistics/Items(guid{item_id})'.replace('{format}', 'json')
        path_params = {}
        if 'division' in params:
            path_params['division'] = params['division']
        if 'item_id' in params:
            path_params['item_id'] = params['item_id']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def division_logistics_items_guiditem_id_put(self, division, item_id, access_token, item, **kwargs):
        """
        Update an item in the database
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_logistics_items_guiditem_id_put(division, item_id, access_token, item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str item_id: ID of Item to update (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param Item item:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.division_logistics_items_guiditem_id_put_with_http_info(division, item_id, access_token, item, **kwargs)
        else:
            (data) = self.division_logistics_items_guiditem_id_put_with_http_info(division, item_id, access_token, item, **kwargs)
            return data

    def division_logistics_items_guiditem_id_put_with_http_info(self, division, item_id, access_token, item, **kwargs):
        """
        Update an item in the database
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_logistics_items_guiditem_id_put_with_http_info(division, item_id, access_token, item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str item_id: ID of Item to update (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param Item item:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['division', 'item_id', 'access_token', 'item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method division_logistics_items_guiditem_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'division' is set
        if ('division' not in params) or (params['division'] is None):
            raise ValueError("Missing the required parameter `division` when calling `division_logistics_items_guiditem_id_put`")
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params) or (params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `division_logistics_items_guiditem_id_put`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `division_logistics_items_guiditem_id_put`")
        # verify the required parameter 'item' is set
        if ('item' not in params) or (params['item'] is None):
            raise ValueError("Missing the required parameter `item` when calling `division_logistics_items_guiditem_id_put`")

        resource_path = '/{division}/logistics/Items(guid{item_id})'.replace('{format}', 'json')
        path_params = {}
        if 'division' in params:
            path_params['division'] = params['division']
        if 'item_id' in params:
            path_params['item_id'] = params['item_id']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item' in params:
            body_params = params['item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def division_logistics_items_post(self, division, access_token, item, **kwargs):
        """
        Add a new item to the database
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_logistics_items_post(division, access_token, item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param Item item:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.division_logistics_items_post_with_http_info(division, access_token, item, **kwargs)
        else:
            (data) = self.division_logistics_items_post_with_http_info(division, access_token, item, **kwargs)
            return data

    def division_logistics_items_post_with_http_info(self, division, access_token, item, **kwargs):
        """
        Add a new item to the database
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_logistics_items_post_with_http_info(division, access_token, item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param Item item:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['division', 'access_token', 'item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method division_logistics_items_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'division' is set
        if ('division' not in params) or (params['division'] is None):
            raise ValueError("Missing the required parameter `division` when calling `division_logistics_items_post`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `division_logistics_items_post`")
        # verify the required parameter 'item' is set
        if ('item' not in params) or (params['item'] is None):
            raise ValueError("Missing the required parameter `item` when calling `division_logistics_items_post`")

        resource_path = '/{division}/logistics/Items'.replace('{format}', 'json')
        path_params = {}
        if 'division' in params:
            path_params['division'] = params['division']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item' in params:
            body_params = params['item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def division_logistics_sales_item_prices_get(self, division, access_token, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_logistics_sales_item_prices_get(division, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param str filter: Filter options for the returned results
        :param str select: Restrict the returned properties to the given set (\"prop1,prop2,...\")
        :param str expand: Expand a given property from an ID to the actual endpoint data
        :param int top: Restrict the number of returned results to the specified amount
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.division_logistics_sales_item_prices_get_with_http_info(division, access_token, **kwargs)
        else:
            (data) = self.division_logistics_sales_item_prices_get_with_http_info(division, access_token, **kwargs)
            return data

    def division_logistics_sales_item_prices_get_with_http_info(self, division, access_token, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_logistics_sales_item_prices_get_with_http_info(division, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param str filter: Filter options for the returned results
        :param str select: Restrict the returned properties to the given set (\"prop1,prop2,...\")
        :param str expand: Expand a given property from an ID to the actual endpoint data
        :param int top: Restrict the number of returned results to the specified amount
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['division', 'access_token', 'filter', 'select', 'expand', 'top']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method division_logistics_sales_item_prices_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'division' is set
        if ('division' not in params) or (params['division'] is None):
            raise ValueError("Missing the required parameter `division` when calling `division_logistics_sales_item_prices_get`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `division_logistics_sales_item_prices_get`")

        resource_path = '/{division}/logistics/SalesItemPrices'.replace('{format}', 'json')
        path_params = {}
        if 'division' in params:
            path_params['division'] = params['division']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']
        if 'filter' in params:
            query_params['$filter'] = params['filter']
        if 'select' in params:
            query_params['$select'] = params['select']
        if 'expand' in params:
            query_params['$expand'] = params['expand']
        if 'top' in params:
            query_params['$top'] = params['top']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2005',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def division_manufacturing_shop_order_routing_step_plans_get(self, division, access_token, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_manufacturing_shop_order_routing_step_plans_get(division, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param str filter: Filter options for the returned results
        :param str select: Restrict the returned properties to the given set (\"prop1,prop2,...\")
        :param str expand: Expand a given property from an ID to the actual endpoint data
        :param str skiptoken: Skiptoken GUID
        :param str orderby: Order the returned items by the given property
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.division_manufacturing_shop_order_routing_step_plans_get_with_http_info(division, access_token, **kwargs)
        else:
            (data) = self.division_manufacturing_shop_order_routing_step_plans_get_with_http_info(division, access_token, **kwargs)
            return data

    def division_manufacturing_shop_order_routing_step_plans_get_with_http_info(self, division, access_token, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_manufacturing_shop_order_routing_step_plans_get_with_http_info(division, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param str filter: Filter options for the returned results
        :param str select: Restrict the returned properties to the given set (\"prop1,prop2,...\")
        :param str expand: Expand a given property from an ID to the actual endpoint data
        :param str skiptoken: Skiptoken GUID
        :param str orderby: Order the returned items by the given property
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['division', 'access_token', 'filter', 'select', 'expand', 'skiptoken', 'orderby']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method division_manufacturing_shop_order_routing_step_plans_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'division' is set
        if ('division' not in params) or (params['division'] is None):
            raise ValueError("Missing the required parameter `division` when calling `division_manufacturing_shop_order_routing_step_plans_get`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `division_manufacturing_shop_order_routing_step_plans_get`")

        resource_path = '/{division}/manufacturing/ShopOrderRoutingStepPlans'.replace('{format}', 'json')
        path_params = {}
        if 'division' in params:
            path_params['division'] = params['division']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']
        if 'filter' in params:
            query_params['$filter'] = params['filter']
        if 'select' in params:
            query_params['$select'] = params['select']
        if 'expand' in params:
            query_params['$expand'] = params['expand']
        if 'skiptoken' in params:
            query_params['$skiptoken'] = params['skiptoken']
        if 'orderby' in params:
            query_params['$orderby'] = params['orderby']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2006',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def division_manufacturing_shop_orders_get(self, division, access_token, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_manufacturing_shop_orders_get(division, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param str filter: Filter options for the returned results
        :param str select: Restrict the returned properties to the given set (\"prop1,prop2,...\")
        :param str expand: Expand a given property from an ID to the actual endpoint data
        :param str skiptoken: Skiptoken GUID
        :param str orderby: Order the returned items by the given property
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.division_manufacturing_shop_orders_get_with_http_info(division, access_token, **kwargs)
        else:
            (data) = self.division_manufacturing_shop_orders_get_with_http_info(division, access_token, **kwargs)
            return data

    def division_manufacturing_shop_orders_get_with_http_info(self, division, access_token, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_manufacturing_shop_orders_get_with_http_info(division, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param str filter: Filter options for the returned results
        :param str select: Restrict the returned properties to the given set (\"prop1,prop2,...\")
        :param str expand: Expand a given property from an ID to the actual endpoint data
        :param str skiptoken: Skiptoken GUID
        :param str orderby: Order the returned items by the given property
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['division', 'access_token', 'filter', 'select', 'expand', 'skiptoken', 'orderby']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method division_manufacturing_shop_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'division' is set
        if ('division' not in params) or (params['division'] is None):
            raise ValueError("Missing the required parameter `division` when calling `division_manufacturing_shop_orders_get`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `division_manufacturing_shop_orders_get`")

        resource_path = '/{division}/manufacturing/ShopOrders'.replace('{format}', 'json')
        path_params = {}
        if 'division' in params:
            path_params['division'] = params['division']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']
        if 'filter' in params:
            query_params['$filter'] = params['filter']
        if 'select' in params:
            query_params['$select'] = params['select']
        if 'expand' in params:
            query_params['$expand'] = params['expand']
        if 'skiptoken' in params:
            query_params['$skiptoken'] = params['skiptoken']
        if 'orderby' in params:
            query_params['$orderby'] = params['orderby']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2007',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def division_manufacturing_time_transactions_get(self, division, access_token, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_manufacturing_time_transactions_get(division, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param str filter: Filter options for the returned results
        :param str select: Restrict the returned properties to the given set (\"prop1,prop2,...\")
        :param str expand: Expand a given property from an ID to the actual endpoint data
        :param str skiptoken: Skiptoken GUID
        :param str orderby: Order the returned items by the given property
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.division_manufacturing_time_transactions_get_with_http_info(division, access_token, **kwargs)
        else:
            (data) = self.division_manufacturing_time_transactions_get_with_http_info(division, access_token, **kwargs)
            return data

    def division_manufacturing_time_transactions_get_with_http_info(self, division, access_token, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_manufacturing_time_transactions_get_with_http_info(division, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param str filter: Filter options for the returned results
        :param str select: Restrict the returned properties to the given set (\"prop1,prop2,...\")
        :param str expand: Expand a given property from an ID to the actual endpoint data
        :param str skiptoken: Skiptoken GUID
        :param str orderby: Order the returned items by the given property
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['division', 'access_token', 'filter', 'select', 'expand', 'skiptoken', 'orderby']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method division_manufacturing_time_transactions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'division' is set
        if ('division' not in params) or (params['division'] is None):
            raise ValueError("Missing the required parameter `division` when calling `division_manufacturing_time_transactions_get`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `division_manufacturing_time_transactions_get`")

        resource_path = '/{division}/manufacturing/TimeTransactions'.replace('{format}', 'json')
        path_params = {}
        if 'division' in params:
            path_params['division'] = params['division']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']
        if 'filter' in params:
            query_params['$filter'] = params['filter']
        if 'select' in params:
            query_params['$select'] = params['select']
        if 'expand' in params:
            query_params['$expand'] = params['expand']
        if 'skiptoken' in params:
            query_params['$skiptoken'] = params['skiptoken']
        if 'orderby' in params:
            query_params['$orderby'] = params['orderby']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2008',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def division_manufacturing_time_transactions_guidid_delete(self, division, id, access_token, **kwargs):
        """
        Delete a TimeTransaction from the database
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_manufacturing_time_transactions_guidid_delete(division, id, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str id: ID of TimeTransaction to delete (required)
        :param str access_token: Access token to the authenticate the request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.division_manufacturing_time_transactions_guidid_delete_with_http_info(division, id, access_token, **kwargs)
        else:
            (data) = self.division_manufacturing_time_transactions_guidid_delete_with_http_info(division, id, access_token, **kwargs)
            return data

    def division_manufacturing_time_transactions_guidid_delete_with_http_info(self, division, id, access_token, **kwargs):
        """
        Delete a TimeTransaction from the database
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_manufacturing_time_transactions_guidid_delete_with_http_info(division, id, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str id: ID of TimeTransaction to delete (required)
        :param str access_token: Access token to the authenticate the request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['division', 'id', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method division_manufacturing_time_transactions_guidid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'division' is set
        if ('division' not in params) or (params['division'] is None):
            raise ValueError("Missing the required parameter `division` when calling `division_manufacturing_time_transactions_guidid_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `division_manufacturing_time_transactions_guidid_delete`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `division_manufacturing_time_transactions_guidid_delete`")

        resource_path = '/{division}/manufacturing/TimeTransactions(guid{id})'.replace('{format}', 'json')
        path_params = {}
        if 'division' in params:
            path_params['division'] = params['division']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def division_manufacturing_time_transactions_guidid_put(self, division, id, access_token, item, **kwargs):
        """
        Update a TimeTransaction in the database
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_manufacturing_time_transactions_guidid_put(division, id, access_token, item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str id: ID of TimeTransaction to update (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param TimeTransaction item:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.division_manufacturing_time_transactions_guidid_put_with_http_info(division, id, access_token, item, **kwargs)
        else:
            (data) = self.division_manufacturing_time_transactions_guidid_put_with_http_info(division, id, access_token, item, **kwargs)
            return data

    def division_manufacturing_time_transactions_guidid_put_with_http_info(self, division, id, access_token, item, **kwargs):
        """
        Update a TimeTransaction in the database
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_manufacturing_time_transactions_guidid_put_with_http_info(division, id, access_token, item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str id: ID of TimeTransaction to update (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param TimeTransaction item:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['division', 'id', 'access_token', 'item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method division_manufacturing_time_transactions_guidid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'division' is set
        if ('division' not in params) or (params['division'] is None):
            raise ValueError("Missing the required parameter `division` when calling `division_manufacturing_time_transactions_guidid_put`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `division_manufacturing_time_transactions_guidid_put`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `division_manufacturing_time_transactions_guidid_put`")
        # verify the required parameter 'item' is set
        if ('item' not in params) or (params['item'] is None):
            raise ValueError("Missing the required parameter `item` when calling `division_manufacturing_time_transactions_guidid_put`")

        resource_path = '/{division}/manufacturing/TimeTransactions(guid{id})'.replace('{format}', 'json')
        path_params = {}
        if 'division' in params:
            path_params['division'] = params['division']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item' in params:
            body_params = params['item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def division_manufacturing_time_transactions_post(self, division, access_token, item, **kwargs):
        """
        Add a new TimeTransaction to the database
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_manufacturing_time_transactions_post(division, access_token, item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param TimeTransaction item:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.division_manufacturing_time_transactions_post_with_http_info(division, access_token, item, **kwargs)
        else:
            (data) = self.division_manufacturing_time_transactions_post_with_http_info(division, access_token, item, **kwargs)
            return data

    def division_manufacturing_time_transactions_post_with_http_info(self, division, access_token, item, **kwargs):
        """
        Add a new TimeTransaction to the database
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_manufacturing_time_transactions_post_with_http_info(division, access_token, item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param TimeTransaction item:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['division', 'access_token', 'item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method division_manufacturing_time_transactions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'division' is set
        if ('division' not in params) or (params['division'] is None):
            raise ValueError("Missing the required parameter `division` when calling `division_manufacturing_time_transactions_post`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `division_manufacturing_time_transactions_post`")
        # verify the required parameter 'item' is set
        if ('item' not in params) or (params['item'] is None):
            raise ValueError("Missing the required parameter `item` when calling `division_manufacturing_time_transactions_post`")

        resource_path = '/{division}/manufacturing/TimeTransactions'.replace('{format}', 'json')
        path_params = {}
        if 'division' in params:
            path_params['division'] = params['division']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item' in params:
            body_params = params['item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def division_payroll_employees_get(self, division, access_token, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_payroll_employees_get(division, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param str filter: Filter options for the returned results
        :param str select: Restrict the returned properties to the given set (\"prop1,prop2,...\")
        :param str expand: Expand a given property from an ID to the actual endpoint data
        :param str skiptoken: Skiptoken GUID
        :param str orderby: Order the returned items by the given property
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.division_payroll_employees_get_with_http_info(division, access_token, **kwargs)
        else:
            (data) = self.division_payroll_employees_get_with_http_info(division, access_token, **kwargs)
            return data

    def division_payroll_employees_get_with_http_info(self, division, access_token, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_payroll_employees_get_with_http_info(division, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param str filter: Filter options for the returned results
        :param str select: Restrict the returned properties to the given set (\"prop1,prop2,...\")
        :param str expand: Expand a given property from an ID to the actual endpoint data
        :param str skiptoken: Skiptoken GUID
        :param str orderby: Order the returned items by the given property
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['division', 'access_token', 'filter', 'select', 'expand', 'skiptoken', 'orderby']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method division_payroll_employees_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'division' is set
        if ('division' not in params) or (params['division'] is None):
            raise ValueError("Missing the required parameter `division` when calling `division_payroll_employees_get`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `division_payroll_employees_get`")

        resource_path = '/{division}/payroll/Employees'.replace('{format}', 'json')
        path_params = {}
        if 'division' in params:
            path_params['division'] = params['division']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']
        if 'filter' in params:
            query_params['$filter'] = params['filter']
        if 'select' in params:
            query_params['$select'] = params['select']
        if 'expand' in params:
            query_params['$expand'] = params['expand']
        if 'skiptoken' in params:
            query_params['$skiptoken'] = params['skiptoken']
        if 'orderby' in params:
            query_params['$orderby'] = params['orderby']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2009',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def division_payroll_employment_contracts_get(self, division, access_token, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_payroll_employment_contracts_get(division, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param str filter: Filter options for the returned results
        :param str select: Restrict the returned properties to the given set (\"prop1,prop2,...\")
        :param str expand: Expand a given property from an ID to the actual endpoint data
        :param str skiptoken: Skiptoken GUID
        :param str orderby: Order the returned items by the given property
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.division_payroll_employment_contracts_get_with_http_info(division, access_token, **kwargs)
        else:
            (data) = self.division_payroll_employment_contracts_get_with_http_info(division, access_token, **kwargs)
            return data

    def division_payroll_employment_contracts_get_with_http_info(self, division, access_token, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_payroll_employment_contracts_get_with_http_info(division, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param str filter: Filter options for the returned results
        :param str select: Restrict the returned properties to the given set (\"prop1,prop2,...\")
        :param str expand: Expand a given property from an ID to the actual endpoint data
        :param str skiptoken: Skiptoken GUID
        :param str orderby: Order the returned items by the given property
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['division', 'access_token', 'filter', 'select', 'expand', 'skiptoken', 'orderby']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method division_payroll_employment_contracts_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'division' is set
        if ('division' not in params) or (params['division'] is None):
            raise ValueError("Missing the required parameter `division` when calling `division_payroll_employment_contracts_get`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `division_payroll_employment_contracts_get`")

        resource_path = '/{division}/payroll/EmploymentContracts'.replace('{format}', 'json')
        path_params = {}
        if 'division' in params:
            path_params['division'] = params['division']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']
        if 'filter' in params:
            query_params['$filter'] = params['filter']
        if 'select' in params:
            query_params['$select'] = params['select']
        if 'expand' in params:
            query_params['$expand'] = params['expand']
        if 'skiptoken' in params:
            query_params['$skiptoken'] = params['skiptoken']
        if 'orderby' in params:
            query_params['$orderby'] = params['orderby']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20010',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def division_project_projects_get(self, division, access_token, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_project_projects_get(division, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param str filter: Filter options for the returned results
        :param str select: Restrict the returned properties to the given set (\"prop1,prop2,...\")
        :param str expand: Expand a given property from an ID to the actual endpoint data
        :param str skiptoken: Skiptoken GUID
        :param str orderby: Order the returned items by the given property
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.division_project_projects_get_with_http_info(division, access_token, **kwargs)
        else:
            (data) = self.division_project_projects_get_with_http_info(division, access_token, **kwargs)
            return data

    def division_project_projects_get_with_http_info(self, division, access_token, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.division_project_projects_get_with_http_info(division, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str division: The division to query (required)
        :param str access_token: Access token to the authenticate the request (required)
        :param str filter: Filter options for the returned results
        :param str select: Restrict the returned properties to the given set (\"prop1,prop2,...\")
        :param str expand: Expand a given property from an ID to the actual endpoint data
        :param str skiptoken: Skiptoken GUID
        :param str orderby: Order the returned items by the given property
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['division', 'access_token', 'filter', 'select', 'expand', 'skiptoken', 'orderby']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method division_project_projects_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'division' is set
        if ('division' not in params) or (params['division'] is None):
            raise ValueError("Missing the required parameter `division` when calling `division_project_projects_get`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `division_project_projects_get`")

        resource_path = '/{division}/project/Projects'.replace('{format}', 'json')
        path_params = {}
        if 'division' in params:
            path_params['division'] = params['division']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']
        if 'filter' in params:
            query_params['$filter'] = params['filter']
        if 'select' in params:
            query_params['$select'] = params['select']
        if 'expand' in params:
            query_params['$expand'] = params['expand']
        if 'skiptoken' in params:
            query_params['$skiptoken'] = params['skiptoken']
        if 'orderby' in params:
            query_params['$orderby'] = params['orderby']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20011',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_me(self, access_token, **kwargs):
        """
        Get the current user's account information
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_me(access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Access token to the authenticate the request (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_me_with_http_info(access_token, **kwargs)
        else:
            (data) = self.get_me_with_http_info(access_token, **kwargs)
            return data

    def get_me_with_http_info(self, access_token, **kwargs):
        """
        Get the current user's account information
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_me_with_http_info(access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Access token to the authenticate the request (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_me" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_me`")

        resource_path = '/current/Me'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
