# coding: utf-8

"""
    Exact Online Rest API

    Interact with Exact Online database

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class EmployeeContract(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, employee_full_name=None, employee=None):
        """
        EmployeeContract - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'employee_full_name': 'str',
            'employee': 'str'
        }

        self.attribute_map = {
            'id': 'ID',
            'employee_full_name': 'EmployeeFullName',
            'employee': 'Employee'
        }

        self._id = id
        self._employee_full_name = employee_full_name
        self._employee = employee

    @property
    def id(self):
        """
        Gets the id of this EmployeeContract.


        :return: The id of this EmployeeContract.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this EmployeeContract.


        :param id: The id of this EmployeeContract.
        :type: str
        """

        self._id = id

    @property
    def employee_full_name(self):
        """
        Gets the employee_full_name of this EmployeeContract.


        :return: The employee_full_name of this EmployeeContract.
        :rtype: str
        """
        return self._employee_full_name

    @employee_full_name.setter
    def employee_full_name(self, employee_full_name):
        """
        Sets the employee_full_name of this EmployeeContract.


        :param employee_full_name: The employee_full_name of this EmployeeContract.
        :type: str
        """

        self._employee_full_name = employee_full_name

    @property
    def employee(self):
        """
        Gets the employee of this EmployeeContract.


        :return: The employee of this EmployeeContract.
        :rtype: str
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """
        Sets the employee of this EmployeeContract.


        :param employee: The employee of this EmployeeContract.
        :type: str
        """

        self._employee = employee

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
