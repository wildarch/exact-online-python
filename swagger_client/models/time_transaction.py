# coding: utf-8

"""
    Exact Online Rest API

    Interact with Exact Online database

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class TimeTransaction(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, date=None, employee=None, hours=None, is_operation_finished=None, labor_hours=None, notes=None, percent_complete=None, quantity=None, routing_step_plan=None, shop_order=None, status=None, timed_time_transaction=None, work_center=None):
        """
        TimeTransaction - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'date': 'str',
            'employee': 'str',
            'hours': 'float',
            'is_operation_finished': 'str',
            'labor_hours': 'float',
            'notes': 'str',
            'percent_complete': 'float',
            'quantity': 'float',
            'routing_step_plan': 'str',
            'shop_order': 'str',
            'status': 'int',
            'timed_time_transaction': 'str',
            'work_center': 'str'
        }

        self.attribute_map = {
            'id': 'ID',
            'date': 'Date',
            'employee': 'Employee',
            'hours': 'Hours',
            'is_operation_finished': 'IsOperationFinished',
            'labor_hours': 'LaborHours',
            'notes': 'Notes',
            'percent_complete': 'PercentComplete',
            'quantity': 'Quantity',
            'routing_step_plan': 'RoutingStepPlan',
            'shop_order': 'ShopOrder',
            'status': 'Status',
            'timed_time_transaction': 'TimedTimeTransaction',
            'work_center': 'WorkCenter'
        }

        self._id = id
        self._date = date
        self._employee = employee
        self._hours = hours
        self._is_operation_finished = is_operation_finished
        self._labor_hours = labor_hours
        self._notes = notes
        self._percent_complete = percent_complete
        self._quantity = quantity
        self._routing_step_plan = routing_step_plan
        self._shop_order = shop_order
        self._status = status
        self._timed_time_transaction = timed_time_transaction
        self._work_center = work_center

    @property
    def id(self):
        """
        Gets the id of this TimeTransaction.


        :return: The id of this TimeTransaction.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TimeTransaction.


        :param id: The id of this TimeTransaction.
        :type: str
        """

        self._id = id

    @property
    def date(self):
        """
        Gets the date of this TimeTransaction.


        :return: The date of this TimeTransaction.
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """
        Sets the date of this TimeTransaction.


        :param date: The date of this TimeTransaction.
        :type: str
        """

        self._date = date

    @property
    def employee(self):
        """
        Gets the employee of this TimeTransaction.


        :return: The employee of this TimeTransaction.
        :rtype: str
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """
        Sets the employee of this TimeTransaction.


        :param employee: The employee of this TimeTransaction.
        :type: str
        """

        self._employee = employee

    @property
    def hours(self):
        """
        Gets the hours of this TimeTransaction.


        :return: The hours of this TimeTransaction.
        :rtype: float
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """
        Sets the hours of this TimeTransaction.


        :param hours: The hours of this TimeTransaction.
        :type: float
        """

        self._hours = hours

    @property
    def is_operation_finished(self):
        """
        Gets the is_operation_finished of this TimeTransaction.


        :return: The is_operation_finished of this TimeTransaction.
        :rtype: str
        """
        return self._is_operation_finished

    @is_operation_finished.setter
    def is_operation_finished(self, is_operation_finished):
        """
        Sets the is_operation_finished of this TimeTransaction.


        :param is_operation_finished: The is_operation_finished of this TimeTransaction.
        :type: str
        """

        self._is_operation_finished = is_operation_finished

    @property
    def labor_hours(self):
        """
        Gets the labor_hours of this TimeTransaction.


        :return: The labor_hours of this TimeTransaction.
        :rtype: float
        """
        return self._labor_hours

    @labor_hours.setter
    def labor_hours(self, labor_hours):
        """
        Sets the labor_hours of this TimeTransaction.


        :param labor_hours: The labor_hours of this TimeTransaction.
        :type: float
        """

        self._labor_hours = labor_hours

    @property
    def notes(self):
        """
        Gets the notes of this TimeTransaction.


        :return: The notes of this TimeTransaction.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """
        Sets the notes of this TimeTransaction.


        :param notes: The notes of this TimeTransaction.
        :type: str
        """

        self._notes = notes

    @property
    def percent_complete(self):
        """
        Gets the percent_complete of this TimeTransaction.


        :return: The percent_complete of this TimeTransaction.
        :rtype: float
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """
        Sets the percent_complete of this TimeTransaction.


        :param percent_complete: The percent_complete of this TimeTransaction.
        :type: float
        """

        self._percent_complete = percent_complete

    @property
    def quantity(self):
        """
        Gets the quantity of this TimeTransaction.


        :return: The quantity of this TimeTransaction.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this TimeTransaction.


        :param quantity: The quantity of this TimeTransaction.
        :type: float
        """

        self._quantity = quantity

    @property
    def routing_step_plan(self):
        """
        Gets the routing_step_plan of this TimeTransaction.


        :return: The routing_step_plan of this TimeTransaction.
        :rtype: str
        """
        return self._routing_step_plan

    @routing_step_plan.setter
    def routing_step_plan(self, routing_step_plan):
        """
        Sets the routing_step_plan of this TimeTransaction.


        :param routing_step_plan: The routing_step_plan of this TimeTransaction.
        :type: str
        """

        self._routing_step_plan = routing_step_plan

    @property
    def shop_order(self):
        """
        Gets the shop_order of this TimeTransaction.


        :return: The shop_order of this TimeTransaction.
        :rtype: str
        """
        return self._shop_order

    @shop_order.setter
    def shop_order(self, shop_order):
        """
        Sets the shop_order of this TimeTransaction.


        :param shop_order: The shop_order of this TimeTransaction.
        :type: str
        """

        self._shop_order = shop_order

    @property
    def status(self):
        """
        Gets the status of this TimeTransaction.


        :return: The status of this TimeTransaction.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this TimeTransaction.


        :param status: The status of this TimeTransaction.
        :type: int
        """

        self._status = status

    @property
    def timed_time_transaction(self):
        """
        Gets the timed_time_transaction of this TimeTransaction.


        :return: The timed_time_transaction of this TimeTransaction.
        :rtype: str
        """
        return self._timed_time_transaction

    @timed_time_transaction.setter
    def timed_time_transaction(self, timed_time_transaction):
        """
        Sets the timed_time_transaction of this TimeTransaction.


        :param timed_time_transaction: The timed_time_transaction of this TimeTransaction.
        :type: str
        """

        self._timed_time_transaction = timed_time_transaction

    @property
    def work_center(self):
        """
        Gets the work_center of this TimeTransaction.


        :return: The work_center of this TimeTransaction.
        :rtype: str
        """
        return self._work_center

    @work_center.setter
    def work_center(self, work_center):
        """
        Sets the work_center of this TimeTransaction.


        :param work_center: The work_center of this TimeTransaction.
        :type: str
        """

        self._work_center = work_center

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
