# coding: utf-8

"""
    Exact Online Rest API

    Interact with Exact Online database

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ShopOrderRoutingStepPlan(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, description=None, operation=None, operation_code=None, operation_description=None, planned_total_hours=None, shop_order=None, workcenter=None):
        """
        ShopOrderRoutingStepPlan - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'description': 'str',
            'operation': 'str',
            'operation_code': 'str',
            'operation_description': 'str',
            'planned_total_hours': 'float',
            'shop_order': 'str',
            'workcenter': 'str'
        }

        self.attribute_map = {
            'id': 'ID',
            'description': 'Description',
            'operation': 'Operation',
            'operation_code': 'OperationCode',
            'operation_description': 'OperationDescription',
            'planned_total_hours': 'PlannedTotalHours',
            'shop_order': 'ShopOrder',
            'workcenter': 'Workcenter'
        }

        self._id = id
        self._description = description
        self._operation = operation
        self._operation_code = operation_code
        self._operation_description = operation_description
        self._planned_total_hours = planned_total_hours
        self._shop_order = shop_order
        self._workcenter = workcenter

    @property
    def id(self):
        """
        Gets the id of this ShopOrderRoutingStepPlan.


        :return: The id of this ShopOrderRoutingStepPlan.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ShopOrderRoutingStepPlan.


        :param id: The id of this ShopOrderRoutingStepPlan.
        :type: str
        """

        self._id = id

    @property
    def description(self):
        """
        Gets the description of this ShopOrderRoutingStepPlan.


        :return: The description of this ShopOrderRoutingStepPlan.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ShopOrderRoutingStepPlan.


        :param description: The description of this ShopOrderRoutingStepPlan.
        :type: str
        """

        self._description = description

    @property
    def operation(self):
        """
        Gets the operation of this ShopOrderRoutingStepPlan.


        :return: The operation of this ShopOrderRoutingStepPlan.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """
        Sets the operation of this ShopOrderRoutingStepPlan.


        :param operation: The operation of this ShopOrderRoutingStepPlan.
        :type: str
        """

        self._operation = operation

    @property
    def operation_code(self):
        """
        Gets the operation_code of this ShopOrderRoutingStepPlan.


        :return: The operation_code of this ShopOrderRoutingStepPlan.
        :rtype: str
        """
        return self._operation_code

    @operation_code.setter
    def operation_code(self, operation_code):
        """
        Sets the operation_code of this ShopOrderRoutingStepPlan.


        :param operation_code: The operation_code of this ShopOrderRoutingStepPlan.
        :type: str
        """

        self._operation_code = operation_code

    @property
    def operation_description(self):
        """
        Gets the operation_description of this ShopOrderRoutingStepPlan.


        :return: The operation_description of this ShopOrderRoutingStepPlan.
        :rtype: str
        """
        return self._operation_description

    @operation_description.setter
    def operation_description(self, operation_description):
        """
        Sets the operation_description of this ShopOrderRoutingStepPlan.


        :param operation_description: The operation_description of this ShopOrderRoutingStepPlan.
        :type: str
        """

        self._operation_description = operation_description

    @property
    def planned_total_hours(self):
        """
        Gets the planned_total_hours of this ShopOrderRoutingStepPlan.


        :return: The planned_total_hours of this ShopOrderRoutingStepPlan.
        :rtype: float
        """
        return self._planned_total_hours

    @planned_total_hours.setter
    def planned_total_hours(self, planned_total_hours):
        """
        Sets the planned_total_hours of this ShopOrderRoutingStepPlan.


        :param planned_total_hours: The planned_total_hours of this ShopOrderRoutingStepPlan.
        :type: float
        """

        self._planned_total_hours = planned_total_hours

    @property
    def shop_order(self):
        """
        Gets the shop_order of this ShopOrderRoutingStepPlan.


        :return: The shop_order of this ShopOrderRoutingStepPlan.
        :rtype: str
        """
        return self._shop_order

    @shop_order.setter
    def shop_order(self, shop_order):
        """
        Sets the shop_order of this ShopOrderRoutingStepPlan.


        :param shop_order: The shop_order of this ShopOrderRoutingStepPlan.
        :type: str
        """

        self._shop_order = shop_order

    @property
    def workcenter(self):
        """
        Gets the workcenter of this ShopOrderRoutingStepPlan.


        :return: The workcenter of this ShopOrderRoutingStepPlan.
        :rtype: str
        """
        return self._workcenter

    @workcenter.setter
    def workcenter(self, workcenter):
        """
        Sets the workcenter of this ShopOrderRoutingStepPlan.


        :param workcenter: The workcenter of this ShopOrderRoutingStepPlan.
        :type: str
        """

        self._workcenter = workcenter

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
