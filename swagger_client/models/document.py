# coding: utf-8

"""
    Exact Online Rest API

    Interact with Exact Online database

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Document(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, account_name=None, body=None, category_description=None, contact_full_name=None, creator_full_name=None, document_date=None, project=None, project_description=None, sales_order_number=None, shop_order_number=None, subject=None, type=None, type_description=None):
        """
        Document - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'account_name': 'str',
            'body': 'str',
            'category_description': 'str',
            'contact_full_name': 'str',
            'creator_full_name': 'str',
            'document_date': 'str',
            'project': 'str',
            'project_description': 'str',
            'sales_order_number': 'int',
            'shop_order_number': 'int',
            'subject': 'str',
            'type': 'int',
            'type_description': 'str'
        }

        self.attribute_map = {
            'id': 'ID',
            'account_name': 'AccountName',
            'body': 'Body',
            'category_description': 'CategoryDescription',
            'contact_full_name': 'ContactFullName',
            'creator_full_name': 'CreatorFullName',
            'document_date': 'DocumentDate',
            'project': 'Project',
            'project_description': 'ProjectDescription',
            'sales_order_number': 'SalesOrderNumber',
            'shop_order_number': 'ShopOrderNumber',
            'subject': 'Subject',
            'type': 'Type',
            'type_description': 'TypeDescription'
        }

        self._id = id
        self._account_name = account_name
        self._body = body
        self._category_description = category_description
        self._contact_full_name = contact_full_name
        self._creator_full_name = creator_full_name
        self._document_date = document_date
        self._project = project
        self._project_description = project_description
        self._sales_order_number = sales_order_number
        self._shop_order_number = shop_order_number
        self._subject = subject
        self._type = type
        self._type_description = type_description

    @property
    def id(self):
        """
        Gets the id of this Document.


        :return: The id of this Document.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Document.


        :param id: The id of this Document.
        :type: str
        """

        self._id = id

    @property
    def account_name(self):
        """
        Gets the account_name of this Document.


        :return: The account_name of this Document.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """
        Sets the account_name of this Document.


        :param account_name: The account_name of this Document.
        :type: str
        """

        self._account_name = account_name

    @property
    def body(self):
        """
        Gets the body of this Document.


        :return: The body of this Document.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """
        Sets the body of this Document.


        :param body: The body of this Document.
        :type: str
        """

        self._body = body

    @property
    def category_description(self):
        """
        Gets the category_description of this Document.


        :return: The category_description of this Document.
        :rtype: str
        """
        return self._category_description

    @category_description.setter
    def category_description(self, category_description):
        """
        Sets the category_description of this Document.


        :param category_description: The category_description of this Document.
        :type: str
        """

        self._category_description = category_description

    @property
    def contact_full_name(self):
        """
        Gets the contact_full_name of this Document.


        :return: The contact_full_name of this Document.
        :rtype: str
        """
        return self._contact_full_name

    @contact_full_name.setter
    def contact_full_name(self, contact_full_name):
        """
        Sets the contact_full_name of this Document.


        :param contact_full_name: The contact_full_name of this Document.
        :type: str
        """

        self._contact_full_name = contact_full_name

    @property
    def creator_full_name(self):
        """
        Gets the creator_full_name of this Document.


        :return: The creator_full_name of this Document.
        :rtype: str
        """
        return self._creator_full_name

    @creator_full_name.setter
    def creator_full_name(self, creator_full_name):
        """
        Sets the creator_full_name of this Document.


        :param creator_full_name: The creator_full_name of this Document.
        :type: str
        """

        self._creator_full_name = creator_full_name

    @property
    def document_date(self):
        """
        Gets the document_date of this Document.


        :return: The document_date of this Document.
        :rtype: str
        """
        return self._document_date

    @document_date.setter
    def document_date(self, document_date):
        """
        Sets the document_date of this Document.


        :param document_date: The document_date of this Document.
        :type: str
        """

        self._document_date = document_date

    @property
    def project(self):
        """
        Gets the project of this Document.


        :return: The project of this Document.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """
        Sets the project of this Document.


        :param project: The project of this Document.
        :type: str
        """

        self._project = project

    @property
    def project_description(self):
        """
        Gets the project_description of this Document.


        :return: The project_description of this Document.
        :rtype: str
        """
        return self._project_description

    @project_description.setter
    def project_description(self, project_description):
        """
        Sets the project_description of this Document.


        :param project_description: The project_description of this Document.
        :type: str
        """

        self._project_description = project_description

    @property
    def sales_order_number(self):
        """
        Gets the sales_order_number of this Document.


        :return: The sales_order_number of this Document.
        :rtype: int
        """
        return self._sales_order_number

    @sales_order_number.setter
    def sales_order_number(self, sales_order_number):
        """
        Sets the sales_order_number of this Document.


        :param sales_order_number: The sales_order_number of this Document.
        :type: int
        """

        self._sales_order_number = sales_order_number

    @property
    def shop_order_number(self):
        """
        Gets the shop_order_number of this Document.


        :return: The shop_order_number of this Document.
        :rtype: int
        """
        return self._shop_order_number

    @shop_order_number.setter
    def shop_order_number(self, shop_order_number):
        """
        Sets the shop_order_number of this Document.


        :param shop_order_number: The shop_order_number of this Document.
        :type: int
        """

        self._shop_order_number = shop_order_number

    @property
    def subject(self):
        """
        Gets the subject of this Document.


        :return: The subject of this Document.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this Document.


        :param subject: The subject of this Document.
        :type: str
        """

        self._subject = subject

    @property
    def type(self):
        """
        Gets the type of this Document.


        :return: The type of this Document.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Document.


        :param type: The type of this Document.
        :type: int
        """

        self._type = type

    @property
    def type_description(self):
        """
        Gets the type_description of this Document.


        :return: The type_description of this Document.
        :rtype: str
        """
        return self._type_description

    @type_description.setter
    def type_description(self, type_description):
        """
        Sets the type_description of this Document.


        :param type_description: The type_description of this Document.
        :type: str
        """

        self._type_description = type_description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
