# coding: utf-8

"""
    Exact Online Rest API

    Interact with Exact Online database

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SalesItemPrice(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, item=None, item_code=None, item_description=None, price=None):
        """
        SalesItemPrice - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'item': 'str',
            'item_code': 'str',
            'item_description': 'str',
            'price': 'float'
        }

        self.attribute_map = {
            'id': 'ID',
            'item': 'Item',
            'item_code': 'ItemCode',
            'item_description': 'ItemDescription',
            'price': 'Price'
        }

        self._id = id
        self._item = item
        self._item_code = item_code
        self._item_description = item_description
        self._price = price

    @property
    def id(self):
        """
        Gets the id of this SalesItemPrice.


        :return: The id of this SalesItemPrice.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SalesItemPrice.


        :param id: The id of this SalesItemPrice.
        :type: str
        """

        self._id = id

    @property
    def item(self):
        """
        Gets the item of this SalesItemPrice.


        :return: The item of this SalesItemPrice.
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item):
        """
        Sets the item of this SalesItemPrice.


        :param item: The item of this SalesItemPrice.
        :type: str
        """

        self._item = item

    @property
    def item_code(self):
        """
        Gets the item_code of this SalesItemPrice.


        :return: The item_code of this SalesItemPrice.
        :rtype: str
        """
        return self._item_code

    @item_code.setter
    def item_code(self, item_code):
        """
        Sets the item_code of this SalesItemPrice.


        :param item_code: The item_code of this SalesItemPrice.
        :type: str
        """

        self._item_code = item_code

    @property
    def item_description(self):
        """
        Gets the item_description of this SalesItemPrice.


        :return: The item_description of this SalesItemPrice.
        :rtype: str
        """
        return self._item_description

    @item_description.setter
    def item_description(self, item_description):
        """
        Sets the item_description of this SalesItemPrice.


        :param item_description: The item_description of this SalesItemPrice.
        :type: str
        """

        self._item_description = item_description

    @property
    def price(self):
        """
        Gets the price of this SalesItemPrice.


        :return: The price of this SalesItemPrice.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this SalesItemPrice.


        :param price: The price of this SalesItemPrice.
        :type: float
        """

        self._price = price

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
